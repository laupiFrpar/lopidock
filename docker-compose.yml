version: '2'

services:

### Applications Code Container #########

  applications:
    image: tianon/true
    volumes:
      - ${APPLICATION}:/var/www:delegated

### Workspace Utilities Container #######

  workspace:
    build:
      args:
        - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
        - PUID=${WORKSPACE_PUID}
        - PGID=${WORKSPACE_PGID}
        - TZ=${WORKSPACE_TIMEZONE}
        - PHP_INSTALL_APCU=${PHP_INSTALL_APCU}
        - PHP_INSTALL_APCU_BC=${PHP_INSTALL_APCU_BC}
        - PHP_INSTALL_OPCACHE=${PHP_INSTALL_OPCACHE}
      context: ./workspace
      dockerfile: "Dockerfile-${PHP_VERSION}"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      - backend
      - frontend
    ports:
      - "${WORKSPACE_SSH_PORT}:22"
    tty: true
    volumes_from:
      - applications

### PHP-FPM Container ###################

  php-fpm:
    build:
      args:
        - INSTALL_APCU=${PHP_INSTALL_APCU}
        - INSTALL_APCU_BC=${PHP_INSTALL_APCU_BC}
        - INSTALL_BCMATH=${PHP_INSTALL_BCMATH}
        - INSTALL_GD=${PHP_INSTALL_GD}
        - INSTALL_ICU_VERSION=${PHP_INSTALL_ICU_VERSION}
        - INSTALL_IMAGICK=${PHP_INSTALL_IMAGICK}
        - INSTALL_INTL=${PHP_INSTALL_INTL}
        - INSTALL_MCRYPT=${PHP_INSTALL_MCRYPT}
        - INSTALL_MYSQL=${PHP_INSTALL_MYSQL}
        - INSTALL_OPCACHE=${PHP_INSTALL_OPCACHE}
        - INSTALL_REDIS=${PHP_INSTALL_REDIS}
        - INSTALL_ZIP=${PHP_INSTALL_ZIP}
      context: ./php
      dockerfile: "Dockerfile-${PHP_VERSION}${SYSTEM_VERSION}"
    depends_on:
      - workspace
    expose:
      - "9000"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      - backend
    volumes:
      - ./php/php-${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      - ${PHP_CUSTOM_CONFIG_PATH}:/usr/local/etc/php/conf.d/custom.ini
      - ${PHP_HOST_LOG_PATH}:/var/log/php
    volumes_from:
      - applications

### NGINX Server Container ##############

  nginx:
    build:
      args:
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
      context: ./nginx
    depends_on:
      - php-fpm
    networks:
      - backend
      - frontend
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    volumes:
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
    volumes_from:
      - applications

### Database Container ##################

  mysql:
    build:
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
      context: ./mysql
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    networks:
      - backend
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - ${DATA_SAVE_PATH}/mysql-${MYSQL_VERSION}:/var/lib/mysql
      - ${MYSQL_CUSTOM_CONFIG_PATH}:/etc/mysql/conf.d/my.cnf

  redis:
    build: ./redis
    networks:
      - backend
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ${DATA_SAVE_PATH}/redis:/data

### Mail Container ######################

  mailcatcher:
    build: ./mailcatcher
    networks:
      - backend
      - frontend
    ports:
      - "${MAILCACTCHER_PORT_SMTP}:1025"
      - "${MAILCACTCHER_PORT_WEB}:1080"

  maildev:
    build: ./maildev
    networks:
      - backend
      - frontend
    ports:
      - "${MAILDEV_PORT_SMTP}:25"
      - "${MAILDEV_PORT_WEB}:80"

  mailhog:
    build: ./mailhog
    networks:
      - backend
      - frontend
    ports:
      - "${MAILHOG_PORT_SMTP}:1025"
      - "${MAILHOG_PORT_WEB}:8025"

### ElasticSearch #######################

  elasticsearch1:
    build:
      context: ./elasticsearch
      dockerfile: "Dockerfile-1"
    networks:
      - backend
    ports:
      - "${ELASTICSEARCH1_PORT_1}:9200"
      - "${ELASTICSEARCH1_PORT_2}:9300"
    volumes:
      - ${DATA_SAVE_PATH}/elasticsearch-1:/usr/share/elasticsearch/data

### Kibana ##############################

  kibana41:
    build:
      context: ./kibana
      dockerfile: "Dockerfile-41"
    links:
      - elasticsearch1:elasticsearch
    networks:
      - backend
      - frontend
    ports:
      - "${KIBANA41_PORT}:5601"

### ELK - Elasticsearch Logstash Kibana #

  elk:
    build:
      context: ./elk
    networks:
      - backend
      - frontend
    ports:
      - "${ELK_PORT}:80"
    volumes:
      - ${ELK_CONFIG_PATH}:/etc/logstash
      - ${ELK_CONFIG_PATTERN_PATH}:/opt/logstash/patterns
      - ${DATA_SAVE_PATH}/elk:/data
    volumes_from:
      - applications

### Networks Setup ######################

networks:
  backend:
    driver: "bridge"
  frontend:
    driver: "bridge"

### Volumes Setup #######################

volumes:
  elasticsearch1:
    driver: "local"
  mysql:
    driver: "local"
  redis:
    driver: "local"
